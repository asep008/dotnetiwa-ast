# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
- group: SAST-Variable

pool:
  name: On-Prem-Hosted-Windows
  vmImage: WIN-DELINEAWS1

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

#- task: Bash@3
#  displayName: start scanning SAST
#  inputs:
#    filePath: ' ~/.fortify/tools/sc-client/22.2.1/bin/scancentral'
#    arguments: '-url $(url_scancentral) start -bt msbuild --build-file IWA.NET.sln -upload -versionid $(versionid) -uptoken $(uptoken) -log sast-$(versionid)-`date +%d-%m-%Y`.log'

#- task: Bash@3
#  displayName: Get Progress scanning
#  inputs:
#    targetType: 'inline'
#    script: |
#      # Write your commands here
#      jobtoken=$(grep "received token" sast-$(versionid)-`date +%d-%m-%Y`.log | awk '(print $6)'
#      echo $jobtoken
      # get status token
#      scancentral -url $(url_scancentral) status -token $jobtoken


#- task: PowerShell@2
#  inputs:
#    targetType: 'inline'
#    script: |
      # Write your PowerShell commands here.
#      echo $env:PATH
#      scancentral -url $env:url_scancentral start -bt msbuild --build-file IWA.NET.sln -upload -versionid $env:versionid -uptoken $env:uptoken
#appendCommitMessageToRunName:


- task: CmdLine@2
  displayName: Submit Scanning Job
  inputs:  
    script: |
      scancentral -url $(url_scancentral) start -bt msbuild --build-file IWA.NET.sln -upload -versionid $(versionid) -uptoken $(uptoken) -log output.log
- task: PowerShell@2
  displayName: check scanning status jobs
  inputs:
    targetType: 'inline'
    script: |
      # get token from scancentral 
      $mytoken = Get-Content output.log | Select-String "received token" | ForEach-Object { $_.ToString().Split(' ')[6] }
      Write-Host $mytoken
      
      # login scan central via fcli
      fcli sc-sast session login --ssc-url $(url_scancentral) --ssc-ci-token $(ssc_ci_token) --client-auth-token $(client_auth_token)
      
      # check scanning status
      fcli sc-sast scan wait-for -i 5s -t 24h $mytoken
